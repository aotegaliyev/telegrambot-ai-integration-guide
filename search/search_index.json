{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This blog is all about making your life easier by integrating ChatGPT into your system, and we're going to use a Telegram bot as a fun example to show you how it's done. Imagine having a bot that's like a friendly helper, ready to break down big tasks into easy steps. We're going to set up a Telegram bot that feels more like a buddy than a bunch of code, turning ChatGPT's smart talk into simple, clear instructions.</p> <p></p> <p>Now, you might wonder, \"Why a Telegram bot?\" Well, it's like showing off a magic trick with your favorite hat. Sure, you can pull a rabbit out of any hat, but this one's special. Similarly, you can integrate ChatGPT with all sorts of services, but we're here to walk you through how cool it can be with a Telegram bot.</p> <p>Imagine you're up to your eyeballs in chores. Instead of fretting over where to start, our Telegram bot can whip up a to-do list for you. Whether it's getting your cleaning supplies ready, scrubbing the oven, or vacuuming the rugs, the bot lays it all out in simple, doable steps. So, let's dive in and turn that daunting task mountain into a walk in the park!</p>"},{"location":"app-guide/","title":"Application initialization","text":""},{"location":"app-guide/#application-initialization","title":"Application Initialization","text":"<p>Next, we need to initialize the FastAPI application. Before the server starts, we must also initialize the python-telegram-bot within it. We will store the main logic in the <code>app.py</code> file.</p> <p>Techie Alert in Tutorial Town!</p> <p>Hey there, savvy coder! Before you dive headfirst into the cool waters of bot-making, let's not forget our digital life jackets: the imports! Imagine them as your coding BFFs, always there to back you up. Without these trusty imports, your bot might just end up swimming with the digital fishes.</p>"},{"location":"app-guide/#1-create-env-variables","title":"1. Create ENV variables","text":"<p>Before starting, let's define the environment variables in a <code>.env</code> file located next to the <code>app.py</code> file, and load them in <code>settings.py</code> file.</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n\nclass Config:\n    BOT_TOKEN = os.getenv('BOT_TOKEN')\n</code></pre>"},{"location":"app-guide/#2-initializing-telegram-bot-application","title":"2. Initializing telegram bot application","text":"<p>And then in <code>app.py</code> we should initialize python telegram bot application.</p> <pre><code>from settings import Config\nfrom telegram.ext import Application\n\nptb = Application.builder().token(Config.BOT_TOKEN).updater(None).build()\n</code></pre>"},{"location":"app-guide/#3-initializing-fastapi-application","title":"3. Initializing FastAPI application","text":"<p>After this we should define Fast api application with following lifespan:</p> <pre><code>from fastapi import FastAPI\nfrom telegram.ext import Updater\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    updater = Updater(ptb.bot, update_queue=ptb.update_queue)\n    await updater.initialize()\n    await updater.start_polling(poll_interval=1)\n\n    async with ptb:\n        await ptb.start()\n        yield\n        await ptb.stop()\n\n\napp = FastAPI(lifespan=lifespan)\n</code></pre> <p>Here we are polling message updates, to implement webhook logic as well we are going to add one more variable to our Config.</p> <pre><code>class Config:\n    ...\n    URL =  os.getenv('APP_URL')  # https://example.com\n</code></pre> <p>We should add webhook API that handles new message updates and our lifespan changes to</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI, Request, Response\nfrom telegram import Update\nfrom telegram.ext import Application, Updater\n\nfrom settings import Config\n\nptb = Application.builder().token(Config.TOKEN).updater(None).build()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    if not Config.URL:\n        updater = Updater(ptb.bot, update_queue=ptb.update_queue)\n        await updater.initialize()\n        await updater.start_polling(poll_interval=1)\n    else:\n        await ptb.bot.set_webhook(\n            url=f'{Config.URL}/telegram',\n            allowed_updates=Update.ALL_TYPES,\n            drop_pending_updates=True,\n        )\n\n    async with ptb:\n        await ptb.start()\n        yield\n        await ptb.stop()\n\n\napp = FastAPI(lifespan=lifespan)\n\n\n@app.post('/telegram')\nasync def process_update(request: Request):\n    req = await request.json()  # Get message updates\n    await ptb.update_queue.put(Update.de_json(data=req, bot=ptb.bot))  # Put message to queue\n    return Response(status_code=200)  # Return success response\n</code></pre> <p>In this setup, If the config URL is set, we handle messages by webhook; otherwise, we start polling.</p>"},{"location":"app-guide/#managing-bot-message-updates","title":"Managing Bot Message Updates","text":"<p>Now we can create bot application routes to handle bot commands and actions.</p> <p>There we should add taskalgobot module that contains <code>handlers.py</code> that consists actions logic and <code>keyboards.py</code> file that saves telegram keyboards.</p>"},{"location":"app-guide/#1-handle-star-help-contact-commands","title":"1. Handle star, help, contact commands","text":"<p>For instance to start bot and get help about bot we should define commands logic</p> <pre><code># handlers.py\nfrom telegram import Update\nfrom telegram.ext import ContextTypes\n\nfrom taskalgobot import keyboards\n\n\nasync def text_with_menu(update: Update, text: str) -&gt; None:\n    await update.message.reply_text(\n        text=text,\n        reply_markup=keyboards.menu_keyboards(),\n    )\n\n\nasync def start_command(\n    update: Update, context: ContextTypes.DEFAULT_TYPE,\n) -&gt; None:\n    text = (\n        'Hi! I can convert your task to algorithms.'\n    )\n    await text_with_menu(update, text=text)\n\n\nasync def help_command(\n    update: Update, context: ContextTypes.DEFAULT_TYPE,\n) -&gt; None:\n    text = (\n        'Hi! I can convert your task to algorithms.\\n'\n        'Advice: \ud83d\udcdd Start typing to request algorithms without commands\\n'\n        'Commands:\\n\\n'\n        '\ud83d\ude4b\u200d\u2642\ufe0f /help \u2014 This is what you see\\n'\n        '\ud83d\udcde /contact \u2014 Contact us if you have any questions :)'\n    )\n    await update.message.reply_text(text=text)\n\n\nasync def contact_command(\n    update: Update, context: ContextTypes.DEFAULT_TYPE,\n) -&gt; None:\n    text = (\n        'This function is developed as an example.'\n    )\n    await update.message.reply_text(text=text)\n</code></pre>"},{"location":"app-guide/#11-handlers-results","title":"1.1 Handlers results","text":"<p>Here in screenshot 2 we can see bot commands results.</p> <p></p> <p>screenshot 2</p>"},{"location":"app-guide/#2-define-menu-keyboards","title":"2 Define menu keyboards","text":"<pre><code># keyboards.py\nfrom telegram import ReplyKeyboardMarkup\n\n\ndef menu_keyboards():\n    reply_keyboard = [\n        [\n            'Create task \ud83d\udcdd',\n            'Help \ud83d\ude4b\u200d\u2642\ufe0f',\n        ],\n        [\n            'Contact us \ud83d\udcde',\n        ]\n    ]\n    return ReplyKeyboardMarkup(\n        reply_keyboard,\n        one_time_keyboard=False,\n        resize_keyboard=True,\n    )\n</code></pre>"},{"location":"app-guide/#21-keyboards-results","title":"2.1 Keyboards results","text":"<p>This keyboards will look like (screenshot 3):</p> <p></p> <p>screenshot 3</p>"},{"location":"app-guide/#3-handling-various-bot-interactions","title":"3 Handling various bot interactions","text":"<p>In <code>app.py</code> file, we're using a Python Telegram Bot (ptb) application object which is crucial for handling various bot interactions.</p> <pre><code># app.py\nfrom telegram.ext import (\n    Application,\n    CallbackQueryHandler,\n    CommandHandler,\n    MessageHandler,\n    ConversationHandler,\n    filters,\n    Updater,\n)\n\n...\n\nptb.add_handler(CommandHandler('start', handlers.start_command))\nptb.add_handler(CommandHandler('help', handlers.help_command))\nptb.add_handler(CommandHandler('contact', handlers.contact_command))\n\nptb.add_handler(MessageHandler(\n    filters.Regex(\"^(Create task \ud83d\udcdd)\"), handlers.start_command))\nptb.add_handler(MessageHandler(\n    filters.Regex(\"^(Help \ud83d\ude4b\u200d\u2642\ufe0f)\"), handlers.help_command))\nptb.add_handler(MessageHandler(\n    filters.Regex(\"^(Contact us \ud83d\udcde)\"), handlers.contact_command))\n\nptb.add_handler(MessageHandler(\n    filters.TEXT &amp; ~filters.COMMAND, handlers.handle_task_to_algo))\n</code></pre>"},{"location":"app-guide/#31-command-handlers-our-bots-reflexes","title":"3.1 Command Handlers \u2013 Our Bot's Reflexes:","text":"<ul> <li>When someone types /start, our bot jumps into action with handlers.start_command. It's like saying \"Hello, world!\" but way cooler.</li> <li>Need help? Just hit /help, and our handlers.help_command is there like a friendly neighborhood superhero.</li> </ul>"},{"location":"app-guide/#33-message-handlers-the-bots-sixth-sense","title":"3.3 Message Handlers \u2013 The Bot's Sixth Sense","text":"<ul> <li>When users get creative and type things like \"Create task \ud83d\udcdd\", our bot knows it's showtime, calling handlers.start_command to get the ball rolling.</li> <li>Do you need \"Help \ud83d\ude4b\u200d\u2642\ufe0f\" with BOT? They've got no secrets from us. Our bot knows exactly what to do, routing them to the right helper functions.</li> </ul> <p>Note</p> <p>\"Contact us \ud83d\udcde\" has just made for demonstration purposes :)</p>"},{"location":"app-guide/#34-task-to-algorithm-handler-the-bots-intuition","title":"3.4 Task to algorithm handler - The Bot's Intuition","text":"<p>For all those times users just chat away, <code>filters.TEXT &amp; ~filters.COMMAND</code> ensures nothing slips through. Every message is a chance for <code>handlers.handle_task_to_algo</code> to shine, turning user chats into action plans.</p> <p>handlers.handle_task_to_algo</p> <p>This function hasn't been implemented yet \u2013 stay tuned and keep your cool! \ud83d\ude0a</p>"},{"location":"gpt-integration/","title":"ChatGPT integration with Application","text":""},{"location":"gpt-integration/#integrating-chatgpt","title":"Integrating ChatGPT","text":"<p>At last, we've reached the pi\u00e8ce de r\u00e9sistance, the cherry on the cake of our project \u2013 integrating ChatGPT! This is where things get really exciting, as we empower our bot with the brainpower of one of the most sophisticated language models out there.</p>"},{"location":"gpt-integration/#1-integration-structure-and-response-model-schemas","title":"1 Integration structure and response model schemas","text":"<p>To weave this magic, we'll roll up our sleeves and introduce a dedicated <code>gpt</code> module. Within this, we'll craft specific files \u2013 <code>client.py</code> for interacting with ChatGPT and <code>schemas.py</code> for structuring our data beautifully. This integration isn't just about adding smarts to our bot; it's about unlocking a whole new realm of possibilities, enabling it to converse, assist, and dazzle users like never before. Let's dive in and bring our bot to life with the power of ChatGPT!</p> <p>Firstly lets configure our schema to parse result</p> <pre><code># schemas.py\nfrom pydantic import BaseModel\n\n\nclass Algorithm(BaseModel):\n    order: int\n    text: str\n\n\nclass Task(BaseModel):\n    algorithms: list[Algorithm]\n</code></pre>"},{"location":"gpt-integration/#2-define-env-variables","title":"2 Define ENV variables","text":"<p>We define OpenAI client with API_KEY that you can get from open ai api-keys page. We should update our <code>.env</code> file and <code>settings -&gt; \u0421onfig</code>.</p> <pre><code># settings.py\nclass Config:\n    ...\n    OPENAI_API_KEY =  os.getenv('OPENAI_API_KEY')\n</code></pre>"},{"location":"gpt-integration/#3-chatgpt-client","title":"3 ChatGPT Client","text":"<p>Next, we encapsulate it using the <code>instructor</code> package, utilizing a response model from schemas. To effectively integrate with ChatGPT, we must craft a precise prompt to elicit the correct response. Within <code>messages -&gt; content</code>, we provide specific instructions tailored to our use case.</p> <pre><code># client.py\nimport logging\n\nimport instructor\nfrom openai import OpenAI\n\nfrom settings import Config\nfrom . import schemas\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclient = instructor.patch(\n    OpenAI(api_key=Config.OPENAI_API_KEY), mode=instructor.Mode.MD_JSON\n)\n\n\nasync def divide_task_to_algo(task: str) -&gt; schemas.TaskDetail | None:\n    try:\n        return client.chat.completions.create(\n            model='gpt-4',\n            response_model=schemas.TaskDetail,\n            max_retries=3,\n            messages=[\n                {\n                    'role': 'system',\n                    'content': (\n                        'You can convert your task to algorithms '\n                        'with its order and text.'\n                    ),\n                },\n                {\n                    'role': 'user',\n                    'content': (\n                        f'I have a task: {task}.'\n                        'Please help me to convert it to algorithms.'\n                    )\n                },\n            ],\n            max_tokens=3000,\n        )\n    except Exception as e:\n        logging.error(e)\n        return None\n</code></pre> <p>And then we should convert this response to readable text from telegram bot, todo so we should define class property that converts response data to readable text</p> <pre><code># schemas.py\nclass TaskDetail(BaseModel):\n    algorithms: list[Algorithm]\n\n    @property\n    def pretty_text(self) -&gt; str:\n        prefix = 'Here is your algorithm:\\n'\n        algorithms = '\\n'.join(f'{a.order}) {a.text}'\n                               for a in self.algorithms)\n\n        return prefix + algorithms\n</code></pre>"},{"location":"gpt-integration/#4-implementing-handle_task_to_algo","title":"4 \ud83d\ude4b\ud83c\udffe Implementing <code>handle_task_to_algo</code>","text":"<p>Once we've nailed down these steps, it's time to treat all incoming Telegram bot messages as tasks that need breaking down into algorithms. The next crucial phase is to meld our bot with ChatGPT, which we achieve by embedding the necessary logic inside the <code>handle_task_to_algo</code> function. This step is key to refining our bot's brain, giving it the ChatGPT-powered boost it needs to interact intelligently and effectively.</p> <pre><code># handlers.py\nfrom telegram import Update\nfrom telegram.ext import ContextTypes\nfrom telegram.constants import ChatAction\n\nfrom gpt import client as openai_client\nfrom gpt.schemas import TaskDetail\n\n# Other handlers\n...\n\nasync def handle_task_to_algo(\n    update: Update, context: ContextTypes.DEFAULT_TYPE,\n) -&gt; None:\n    await context.bot.send_chat_action(\n        chat_id=update.effective_message.chat_id,\n        action=ChatAction.TYPING,\n    )  # Here we show typing animation in telegram chat\n    await update.message.reply_text('\ud83e\udde0 Processing...')\n\n    task = update.message.text\n    task_detail: TaskDetail = await openai_client.divide_task_to_algo(task)\n\n    if not task_detail:\n        await update.message.reply_text(\n            'I could not convert your task to algorithms. \ud83d\ude14'\n        )\n        return None\n\n    await update.message.reply_text(task_detail.pretty_text)\n</code></pre>"},{"location":"gpt-integration/#run-bot","title":"Run bot","text":"<p>To start the bot just type in your project root:</p> <pre><code>uvicorn app:app --reload\n</code></pre>"},{"location":"gpt-integration/#project-structure","title":"Project structure","text":"<p>Final project structure should look like:</p> <pre><code>project_root/\n\u2502\n\u251c\u2500\u2500 gpt/                # Directory for GPT-related modules\n\u2502   \u251c\u2500\u2500 __init__.py     # Initializes the gpt package\n\u2502   \u251c\u2500\u2500 client.py       # Contains the logic to interact with the ChatGPT API\n\u2502   \u2514\u2500\u2500 schemas.py      # Defines pydantic models for ChatGPT data structures\n\u2502\n\u251c\u2500\u2500 taskalgobot/        # Directory for Telegram bot-specific modules\n\u2502   \u251c\u2500\u2500 __init__.py     # Initializes the taskalgobot package\n\u2502   \u251c\u2500\u2500 handlers.py     # Contains handler functions for different bot commands\n\u2502   \u2514\u2500\u2500 keyboards.py    # Defines custom keyboards for the bot interface\n\u2502\n\u251c\u2500\u2500 app.py              # Main application entry point\n\u251c\u2500\u2500 requirements.txt    # Lists all necessary Python dependencies\n\u251c\u2500\u2500 .env                # Stores environment variables for local development\n\u2514\u2500\u2500 .env.example        # Provides a template for setting up .env files\n</code></pre> <p>And there we have it, folks! We've journeyed through the code jungle and emerged with a bot that's not just smart but ChatGPT-smart. Now, who's ready for the grand finale? Let's roll out the red carpet and unveil the fruits of our labor. Get your popcorn ready because the results of this tutorial are about to dazzle and amuse. Drumroll, please! \ud83e\udd41\ud83c\udf89</p>"},{"location":"project-setup/","title":"Setting Up the Project","text":""},{"location":"project-setup/#bot-setup","title":"Bot setup","text":"<p>To begin, you first need to create your Telegram bot. There are numerous online tutorials that can walk you through this process, or just write commands in Screenshot 1 to BotFather in telegram. By the end of these steps, you should acquire an authentication token, which typically looks something like '123456789:AaBbCcDd'.</p> <p> screenshot 1</p>"},{"location":"project-setup/#project-setup","title":"Project setup","text":"<p>Once our bot is up and raring to go, we're diving into the world of web servers, because, hey, our Telegram bot loves to chat using webhooks and polling! Enter FastAPI - our superhero web server that's not only strong but also super friendly for us developers.</p> <p>With the <code>python-telegram-bot</code> library joining our tech squad, our bot will be chatting like a pro, thanks to its smooth talks with the Telegram API. And guess what? We're giving our bot a dose of AI smarts by hooking it up with the <code>openai</code> ChatGPT package. This means our bot won't just listen; it'll engage, thanks to some next-level chit-chat skills.</p> <p>But there's more - we're also bringing in the <code>instructor</code> package to make sense of all that GPT gab, and <code>Pydantic</code> schemas will ensure everything's tidy and in order, data-wise. So, we're all set to create an app that doesn't just talk the talk but walks the walk, delivering snappy, smart responses every time!</p> <p>Before starting the coding process, you need to set up an organized workspace for your application, which we will name \"taskalgorithm\". Here's a step-by-step guide to get your environment ready:</p>"},{"location":"project-setup/#1-create-a-project-folder","title":"1. Create a Project Folder","text":"<p>Begin by creating a folder named \"taskalgorithm\" to house all your application files.</p> <pre><code>mkdir taskalgorithm\ncd taskalgorithm\n</code></pre>"},{"location":"project-setup/#2-set-up-a-virtual-environment","title":"2. Set Up a Virtual Environment","text":"<p>Using a virtual environment is crucial for managing dependencies specific to your project without affecting the global Python environment.</p> <p>To create a virtual environment, execute:</p> <pre><code>python -m venv venv\n</code></pre> <p>To activate the virtual environment, use:</p> <pre><code>source venv/bin/activate  # On Unix/macOS\n.\\venv\\Scripts\\activate  # On Windows\n</code></pre>"},{"location":"project-setup/#3-install-required-packages","title":"3. Install Required Packages","text":"<p>Once your environment is active, you need to install the necessary libraries. Storing all the dependencies in a <code>requirements.txt</code> file simplifies this process.</p> <p>First, create a <code>requirements.txt</code> file and list the following packages:</p> <pre><code>fastapi==0.109.2\nuvicorn==0.27.1\npython-telegram-bot==20.8\nopenai==1.12.0\npython-dotenv==1.0.1\npydantic==2.6.1\ninstructor==0.6.0\n</code></pre> <p>Then, install these packages using pip:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>By following these steps, you'll have a solid foundation to start developing your \"TaskAlgorithmBot\" application, with all the necessary Python packages installed within an isolated environment.</p>"},{"location":"results/","title":"Results & Final Thoughts","text":""},{"location":"results/#results","title":"\ud83c\udfc1 Results","text":"<p>At the end we should get this results (screenshot 4):</p> <p></p> <p>screenshot 4</p> <p>Info</p> <p>For those eager to explore the complete code and delve deeper into how everything comes together, please visit my GitHub page.</p> <p>Your insights and inquiries are highly valued, so feel free to connect if you have any questions or feedback. Dive into the code, get inspired, and see how you can adapt these insights to your own projects!</p>"},{"location":"results/#wrapping-it-up-with-a-bow","title":"\ud83c\udf80 Wrapping It Up With a Bow","text":"<p>Alright, we've had our fun, mixed in a dash of code, and voila \u2013 ChatGPT is now part of our Telegram bot family, making AI seem like a piece of cake. We've jazzed up our bot with some ChatGPT smarts, and now it's all set to show off, whether it's in customer service, keeping projects on track, or even teaching folks a thing or two.</p> <p>This journey wasn't just about getting geeky with AI; it was about giving our tech tools a brain boost. Now our bot isn't just any bot \u2013 it's a super-bot, ready to dive into tasks with flair and finesse.</p> <p>So, what's next? Dream big, because with ChatGPT in your toolkit, your projects are going to shine, turning the mundane into the extraordinary. Here's to the future \u2013 it's looking bright, and oh-so-clever! \ud83c\udf1f\ud83e\udd16\u2728</p>"}]}